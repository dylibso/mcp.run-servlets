// THIS FILE WAS GENERATED BY `xtp-cpp-bindgen`. DO NOT EDIT.
#define EXTISM_CPP_IMPLEMENTATION
#include "pdk.gen.hpp"
#include <extism-pdk.hpp>
#include <jsoncons/json.hpp>
#include <magic_enum.hpp>

JSONCONS_ENUM_TRAITS(pdk::ContentType, text, image, resource)
JSONCONS_ENUM_TRAITS(pdk::Role, assistant, user)
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::ToolDescription, 3,
                              (inputSchema, "inputSchema"),
                              (description, "description"), (name, "name"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::ListToolsResult, 1, (tools, "tools"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::TextResourceContents, 2, (text, "text"),
                              (uri, "uri"), (mimeType, "mimeType"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::TextAnnotation, 2, (audience, "audience"),
                              (priority, "priority"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::Content, 1, (type, "type"),
                              (annotations, "annotations"), (data, "data"),
                              (mimeType, "mimeType"), (text, "text"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::CallToolResult, 1, (content, "content"),
                              (isError, "isError"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::Params, 1, (name, "name"),
                              (arguments, "arguments"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::CallToolRequest, 1, (params, "params"),
                              (method, "method"))
JSONCONS_N_MEMBER_NAME_TRAITS(pdk::BlobResourceContents, 2, (blob, "blob"),
                              (uri, "uri"), (mimeType, "mimeType"))

namespace pdk {

namespace exports {

int32_t EXTISM_EXPORTED_FUNCTION(call) {
  extism::log_debug("call: getting JSON input");
  auto input_str = extism::input().string();
  if (!input_str.size()) {
    extism::error_set("0 length input cannot be json");
    return -1;
  }
  auto input = jsoncons::decode_json<CallToolRequest>(std::move(input_str));
  extism::log_debug("call: calling implementation function");
  auto result = impl::call(std::move(input));
  if (!result) {
    extism::error_set("call: failed");
    return -3;
  }
  extism::log_debug("call: setting JSON output");
  std::string output;
  jsoncons::encode_json(*result, output);
  if (!extism::output<char>(output)) {
    extism::error_set("outputting failed");
    return -5;
  }
  extism::log_debug("call: returning");
  return 0;
}

int32_t EXTISM_EXPORTED_FUNCTION(describe) {
  extism::log_debug("describe: calling implementation function");
  auto result = impl::describe();
  if (!result) {
    extism::error_set("describe: failed");
    return -3;
  }
  extism::log_debug("describe: setting JSON output");
  std::string output;
  jsoncons::encode_json(*result, output);
  if (!extism::output<char>(output)) {
    extism::error_set("outputting failed");
    return -5;
  }
  extism::log_debug("describe: returning");
  return 0;
}

} // namespace exports

namespace imports {} // namespace imports

} // namespace pdk
