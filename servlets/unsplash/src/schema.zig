// THIS FILE WAS GENERATED BY `xtp-zig-bindgen`. DO NOT EDIT.
const std = @import("std");
const extism = @import("extism-pdk");

const _host = struct {};

const _plugin = extism.Plugin.init(std.heap.wasm_allocator);

///
pub const BlobResourceContents = struct {
    /// A base64-encoded string representing the binary data of the item.
    blob: []const u8,
    /// The MIME type of this resource, if known.
    mimeType: ?[]const u8 = null,
    /// The URI of this resource.
    uri: []const u8,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *BlobResourceContents) !*BlobResourceContents {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *BlobResourceContents) !*BlobResourceContents {
        return self;
    }
};

/// Used by the client to invoke a tool provided by the server.
pub const CallToolRequest = struct {
    method: ?[]const u8 = null,
    params: Params,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *CallToolRequest) !*CallToolRequest {
        self.params = (try self.params.XXX__decodeBase64Fields()).*;

        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *CallToolRequest) !*CallToolRequest {
        self.params = (try self.params.XXX__encodeBase64Fields()).*;

        return self;
    }
};

/// The server's response to a tool call.
///
/// Any errors that originate from the tool SHOULD be reported inside the result
/// object, with `isError` set to true, _not_ as an MCP protocol-level error
/// response. Otherwise, the LLM would not be able to see that an error occurred
/// and self-correct.
///
/// However, any errors in _finding_ the tool, an error indicating that the
/// server does not support tool calls, or any other exceptional conditions,
/// should be reported as an MCP error response.
pub const CallToolResult = struct {
    content: []Content,
    /// Whether the tool call ended in an error.
    ///
    /// If not set, this is assumed to be false (the call was successful).
    isError: ?bool = null,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *CallToolResult) !*CallToolResult {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *CallToolResult) !*CallToolResult {
        return self;
    }
};

/// A content response.
/// For text content set type to ContentType.Text and set the `text` property
/// For image content set type to ContentType.Image and set the `data` and `mimeType` properties
pub const Content = struct {
    annotations: ?TextAnnotation = null,
    /// The base64-encoded image data.
    data: ?[]const u8 = null,
    /// The MIME type of the image. Different providers may support different image types.
    mimeType: ?[]const u8 = null,
    /// The text content of the message.
    text: ?[]const u8 = null,
    type: ContentType,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *Content) !*Content {
        if (self.annotations != null) {
            self.annotations = (try self.annotations.?.XXX__decodeBase64Fields()).*;
        }

        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *Content) !*Content {
        if (self.annotations != null) {
            self.annotations = (try self.annotations.?.XXX__encodeBase64Fields()).*;
        }

        return self;
    }
};

pub const ContentType = enum {
    text,
    image,
    resource,
};

/// Provides one or more descriptions of the tools available in this servlet.
pub const ListToolsResult = struct {
    /// The list of ToolDescription objects provided by this servlet.
    tools: []ToolDescription,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *ListToolsResult) !*ListToolsResult {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *ListToolsResult) !*ListToolsResult {
        return self;
    }
};

///
pub const Params = struct {
    arguments: ?std.json.Value,
    name: []const u8,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *Params) !*Params {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *Params) !*Params {
        return self;
    }
};

/// The sender or recipient of messages and data in a conversation.
pub const Role = enum {
    assistant,
    user,
};

/// A text annotation
pub const TextAnnotation = struct {
    /// Describes who the intended customer of this object or data is.
    ///
    /// It can include multiple entries to indicate content useful for multiple audiences (e.g., `["user", "assistant"]`).
    audience: ?[]Role = null,
    /// Describes how important this data is for operating the server.
    ///
    /// A value of 1 means "most important," and indicates that the data is
    /// effectively required, while 0 means "least important," and indicates that
    /// the data is entirely optional.
    priority: ?f64 = null,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *TextAnnotation) !*TextAnnotation {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *TextAnnotation) !*TextAnnotation {
        return self;
    }
};

///
pub const TextResourceContents = struct {
    /// The MIME type of this resource, if known.
    mimeType: ?[]const u8 = null,
    /// The text of the item. This must only be set if the item can actually be represented as text (not binary data).
    text: []const u8,
    /// The URI of this resource.
    uri: []const u8,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *TextResourceContents) !*TextResourceContents {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *TextResourceContents) !*TextResourceContents {
        return self;
    }
};

/// Describes the capabilities and expected paramters of the tool function
pub const ToolDescription = struct {
    /// A description of the tool
    description: []const u8,
    /// The JSON schema describing the argument input
    inputSchema: std.json.Value,
    /// The name of the tool. It should match the plugin / binding name.
    name: []const u8,

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__decodeBase64Fields(self: *ToolDescription) !*ToolDescription {
        return self;
    }

    /// Internally used function, should not be called by plugin authors.
    pub fn XXX__encodeBase64Fields(self: *ToolDescription) !*ToolDescription {
        return self;
    }
};
