// THIS FILE WAS GENERATED BY `xtp-zig-bindgen`. DO NOT EDIT.
const std = @import("std");
const extism = @import("extism-pdk");

const user = @import("main.zig");
const schema = @import("schema.zig");

pub const _plugin = extism.Plugin.init(std.heap.wasm_allocator);

const ERR_PRINTING_MSG: []const u8 = "std.fmt.allocPrint failed when formatting plugin error";

export fn call() i32 {
    // Get the input data
    // in JSON
    const json_input = _plugin.getJsonOpt(schema.CallToolRequest, .{}) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    defer json_input.deinit();

    var input = json_input.value();
    // decode all the inner buffer fields from base64 (may be no-op)
    input = (input.XXX__decodeBase64Fields() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    }).*;

    // Call the implementation function
    const output = user.call(input) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };

    var json_output = output;
    // encode all the inner buffer fields to base64 (may be no-op)
    json_output = (json_output.XXX__encodeBase64Fields() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    }).*;
    _plugin.outputJson(json_output, .{}) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    return 0;
}

export fn describe() i32 {
    const output = user.describe() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };

    var json_output = output;
    // encode all the inner buffer fields to base64 (may be no-op)
    json_output = (json_output.XXX__encodeBase64Fields() catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    }).*;
    _plugin.outputJson(json_output, .{}) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    return 0;
}
